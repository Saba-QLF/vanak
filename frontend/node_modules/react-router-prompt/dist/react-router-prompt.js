import { jsx as f, Fragment as m } from "react/jsx-runtime";
import { useEffect as l, useCallback as n } from "react";
import { useBlocker as p, useBeforeUnload as d } from "react-router-dom";
function k(t) {
  const o = p(t);
  return l(() => {
    o.state === "blocked" && !t && o.reset();
  }, [o, t]), d(
    n(
      (e) => {
        (typeof t == "boolean" && t === !0 || // @ts-expect-error Reload case -- No location present
        typeof t == "function" && t()) && (e.preventDefault(), e.returnValue = "Changes that you made may not be saved.");
      },
      [t]
    ),
    { capture: !0 }
  ), o;
}
const y = (t) => {
  const o = k(t), e = () => {
    o.state === "blocked" && o.reset();
  }, r = () => {
    o.state === "blocked" && setTimeout(o.proceed, 0);
  };
  return {
    isActive: o.state === "blocked",
    onConfirm: r,
    resetConfirmation: e
  };
};
function v({
  when: t,
  children: o,
  beforeCancel: e,
  beforeConfirm: r
}) {
  const { isActive: c, onConfirm: s, resetConfirmation: i } = y(t), a = n(async () => {
    r && await r(), s();
  }, [r, s]), u = n(async () => {
    e && await e(), i();
  }, [e, i]);
  return c ? /* @__PURE__ */ f(m, { children: o({
    isActive: !0,
    onConfirm: a,
    onCancel: u
  }) }) : null;
}
export {
  v as default,
  y as useConfirm,
  k as usePrompt
};
